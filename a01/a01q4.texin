First start with pseudocodes.
\begin{algorithm}
power(base, exp)
	if exp = 1 then // base case
		return base

	let base2 = base * base
	let newexp = exp / 2 // can achieve O(1) with bit-shifting; value is truncated

	if exp is odd then // can achieve O(1) with bit-masking
		return base * power(base2, newexp)
	else
		return power(base2, newexp)
\end{algorithm}
To view the algorithm, think of the it as the bottom-up construction of a path from a specialized, complete binary tree, $B$.
\begin{itemize}
\item
Each node in $B$ contains $N_i = base^{2^i}$, where $i$ is the level from the buttom (i.e. leaf level is zero; notice in the algorithm the base case is $exp = 1$).
\item
Each node have an extra variable that decides whether $exp_i$ is odd.
\end{itemize}

Notice nodes in the leaf level contains $N_0 = base$, and the product of the bottom level (times an extra $N_0$ if $exp$ is odd) is $power(base, exp)$, as described in the question and cost $\Theta(n)$.
Similarly for other levels.

The quicker method is to construct a path by taking, say, the right-most nodes.
Notice the value of all internal nodes can be form by multiplying its 2 children.
When the recursion calls ends it starts with $N_k$, then the stack starts to pop and has to multiply $N_i$ for the odd cases (every level in $B$ has a power of 2 number of nodes, hence the extra node for odd cases is ``missing", therefore needs to be fixed).

{\bf Notice the algorithm only builds one path of $B$ from buttom-up, not the entire tree.}
Also, the running time depends on $exp$, which is being halved for each recursion call (aka the path from the root of $B$ to the bottom) -- this is the division process.
There is no need to merge, since the odd-case fix is part of the recursion stack, so the conquering process is completed during the division process.

Thus, the running time depends only on the height of $B$.
\begin{align*}
T(n) \in \Theta(height(B)) = \Theta(\log n)
\end{align*}
\done
