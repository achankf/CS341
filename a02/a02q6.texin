First do some guess-and-verify for $T(n) \le cn$, for some $c$.
\begin{align*}
T(2) &= T(1) = 1 \le 2& \text{1 is for counting} \\
T(4) &= T(2) + T(1) = 2 \le 4\\
T(8) &= T(4) + T(2) + T(1) = 4 \le 8 & \text{base case okay}\\
T(n) &\le c(\frac{n}{2}) + c(\frac{n}{4}) + c(\frac{n}{8}) + 1\\
	&\le \frac{7}{8}cn + O(1)\\
	&\le cn
\end{align*}
It is counter-intuitive, but let's estimates the bounds pretending that we do not know $T(n) \in O(n)$ from induction.

\begin{tabular}{|l|p{4cm}|l|l|}
\hline
Level & T(...) & Minimum Cost & Maximum Cost \\
\hline
1 & $T(\frac{n}{2}), T(\frac{n}{4}), T(\frac{n}{8})$ & 1 & $2^3$ \\
2 & $T(\frac{n}{2}), T(\frac{n}{4}), T(\frac{n}{8})$, 
		$T(\frac{n}{8}), T(\frac{n}{16}), T(\frac{n}{32})$,
		$T(\frac{n}{16}), T(\frac{n}{32}), T(\frac{n}{64})$  & 1 & $2^4$\\
$\cdots$ & $\cdots$ & $\cdots$ & $\cdots$\\
k & a lot & 1 & at most $2^{k+2}$ \\
\hline
\end{tabular}

Suppose the recursion completes at the $k$-level, and the maximum path is the one that keep going into $T(\frac{n}{2}$ (recurse on more items than the rest).
Then $T(\frac{n}{2^k}) = 1$, which implies $k \le \lg n$.
Now summing up the costs:
\begin{align*}
T(n) &\le \Theta(1) + \sum_{i = 0}^{\lg n - 1} 2^{i+2} \\
	&\le \Theta(1) + 4 \sum_{i = 0}^{\lg n - 1} 2^{i} \\
	&\le \Theta(1) + 4 \frac{2^{\lg n} - 1}{2 - 1} & \text{geometric series}\\
	&\le \Theta(1) + \Theta(n^{\lg 2}) & \text{log rules}\\
	\implies T(n) &\in O(n) & \text{what a surprise}
\end{align*}

Using similar arguments for the lower bound:
It is the path that recurses on $T(\frac{n}{8})$.
This means $k \ge \log_8 n$.
\begin{align*}
T(n) &\ge \Theta(1) + \sum_{i = 0}^{\log_8 n - 1} 1 \\
	&\ge \Theta(\log_8 n) \\
	\implies T(n) &\in \Omega(\log_8 n)
\end{align*}

Therefore, the true running time is sandwitched by $\Omega(n^{\log_8 n})$ and $O(n)$.
\done
