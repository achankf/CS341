{\bf Idea} First, we have to realize that we can form at most ${n \choose 2} \in \Theta(n^2)$ pairs.
So, that means we have to do something clever to avoid $O(n^2)$ worst case.
That is, we sort the set of cooridinates and then infer the number of pairs for each coordinate in $O(1)$ time {\bf in total} (i.e. geometric series for $r < 1$), so that the combining step cost $O(n)$ {\bf in total}.

Now, let's consider the following observations.
The proofs are omitted because they follows from the way that the set is being sorted and from the definition of dominance (not that I am lazy or anything {\tt:)}).
\begin{claim}
Let $S^1$ be an ordered set of input coordinates by the {\bf x-coordinates} in ascending order, then by y-coordinates in descending order.
If $i > j$, then $S^1_i$ can not dominate $S^1_j$.
\end{claim}

\begin{coro}
If $S^1$ is being partitioned into 2 halves by the x-coordinates ($L$ for the lower x's, $U$ for the upper x's), then elements in $U$ cannot dominate elements in $L$.
\end{coro}
{\bf This means only the elements in $L$ will look for domination, and elements in $U$ will be used by elements in $L$ for counting the pairs.}
\begin{claim}
Let $S^2$ be an ordered set of input coordinates by the {\bf y-coordinates} in descending order, then by x-coordinates in ascending order.
If $i < j$, then $S^2_i$ can not dominate $S^2_j$.
\end{claim}
Suppose we can scan the plot from top to bottom, then we just need to keep track the number of elements seen so far from $U$ in a counter, say $c$; then each time when we see an element, say $x$ from $L$, it follows that $x$ dominates $c$ coordinates.
