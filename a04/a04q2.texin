{\bf Idea}
Given $G = (V,E)$ as an adjacency list.
Do DFS and colour the whole graph along the way.
Let's bound the number number of colours with the following claim.
\begin{claim}
Let $G = (V,E)$ be an undirected graph where the degree of each vertex is at most 2.
Then, $G$ is 4-colourable.
\end{claim}
\begin{proof}
First notice that a graph $G$ has at most degree 2 means each vertex has at most 2 neighbours.
Also, connected components of $G$ cannot contain $K_5$ or $K_{3,3}$, because that would mean some vertices have more than 2 neighbours, so $G$ is planar.
Therefore, $G$ is 4-colourable.
\end{proof}
\begin{claim}
Each connected component in $G$ can contain at most 1 cycle.
\end{claim}
\begin{proof}
Suppose by contracdiction that there exists a component that has 2 cycles.
Then some vertex, $v$, must have more than 2 neighbours, because being part of exactly one cycle means $v$ has 2 edges that point to other vertices in the cycle, so being in another cycle means $v$ must be connected to at least one other vertex in the other cycle.
However, the specification says $G$ can have at most degree 2, therefore each component can have at most 1 cycle.
\end{proof}
Together, we have the idea that we are colouring in the form $C1, C2, C1, C2, \cdots$ and at the end, if the component is not bipartite, we use a third colour.
Then, the algorithm continues with another component.

First, consider the visit function.
\begin{algorithm}
function DFSColourVisit(vertex, previous_colour)

	set vertex to GRAY

	// indicates which colour is being used; O(1)
	let colours be array of boolean

	// O(1) -- neighbours size is bounded
	for each neighbour in vertex do
		set colours[neighbour] to true
	end for

	// O(1) -- linear search on at most 4 colours
	find unused_colour with the lowest index such that unused_colour is not previous_colour and colours[index] is false

	// GLOBAL variable; take the max because it indicates the number of used colours
	set min_colour to max(min_colour, current_colour)
	
	for each neighbour in vertex do
		continue whenever if neighbour is not WHITE
		DFSColourVisit(neighbour, current_colour)
	end for

	set vertex to BLACK
\end{algorithm}
Notice each operation, other than the loop for recursing on {\tt DFSColourVisit}, is $O(1)$.

Then the main algorithm (again, from the DFS template).
\begin{algorithm}
function specialColour (L)
	let min_colour be 0 // minimal colourings

	for each vertex in L do
		continue whenever vertex is not WHITE
		DFSColourVisit(vertex, NULL) // no previous colouring
	end for

	return min_colour // return the number of colouring is our purpose
\end{algorithm}
{\tt specialColour} uses the depth-first search template, so the worst-case complexity is $O(|V| + |E|) = O(|V|)$, because $|E| \le 2|V|$ due to each node having at most degree 2.
