{\bf Idea}
Similarly to the previous question, we use a book-keeping array to keep track of the number of in-going edges for each vertex, except this time we decrement the values during the recursion.
Finally, output the vertex if the count becomes 0.
\begin{magic}
Notice the out-going edge of a vertex is an in-going edge of another vertex.
Also, since we are given a directed acyclic graph, so some vertices must have in-degree of zero.
\end{magic}
The algorithm basically follows the depth-first search template.
It sets up the in-degree array, and then calls its helper function whenever it finds a vertex that has in-degree of 0 and is not being visited.
\begin{algorithm}
topsort adjL // given adjacency list

	// initialize the in-degree values -- from question 1
	create bookkeep as findInDegree(adjL)

	for each vertex in adjL do // O(|V| + |E|); for being DFS 
		continue whenever bookkeep[vertex] is not zero
			and vertex is BLACK

		depthfirstzero vertex // aka DFSVisit
	end for
\end{algorithm}
Then the helper function (aka {\tt DFSVisit}).
Notice nothing is actually being removed -- the ``removing" part just decrement in-degree counters within the book-keeping array, while the graph remain untouched.
\begin{algorithm}
depthfirstzero vertex
	// notice each edge is visited once
	return nothing when bookkeep[vertex] is not zero

	output vertex
	set colour of vertex BLACK

	for each neighbour in vertex do
		// out-going TO neighbour means in-going FROM vertex
		bookkeep[neighbour]--

		// found a new ``root"
		if bookkeep[neighbour] is zero and neighbour is WHITE then
			depthfirstzero vertex
		end if
	end for
\end{algorithm}
Since {\tt topsort} is DFS with constant manipulation on the book-keeping array, so the running is $O(|V| + |E|)$, which matches with the textbook.
\done
