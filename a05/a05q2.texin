{\bf Idea}
First think about how we make the algorithm in exponential time, and then think about it in the \emph{reverse} direction.

{\bf Exponential Method}
\begin{itemize}
\item
{\bf Base Case}
If the input has one word left, $w_n$, return 1 if $w_n$ ends with $R$; otherwise return 0.
\item
Starting from the first word, keep searching until the minimum threshold is reached (just above or equal 72) at word $w_i$.
\item
For each word after $w_i$ up to $80-72=8$ extra words (I'm being \emph{too} generous for the bound, can be less due to spaces), say at $w_j$ ($i \le j$), copy the input text without $w_1$ to $w_j$ and then recurse.
{\bf Notice finding the 8 extra words is $O(1)$.}
\item
Finally, when recursion starts to unfold, it picks the choice (from at most 8 possible choices in each recursion branch) that gives the most lines that end with $R$.
\end{itemize}

{\bf Optimal Structure}
Depending on the spelling, the last word always end with either no $R$ or 1 $R$.
The last line either end with the last word, or the second last word, and so on.

{\bf Overlapping Property}
Notice that the last word is being used for calculation for many times at the end, and it is needed by the previous sub-problem.

{\bf Dynamic Programming}

The point is to use a book-keeping array of pairs of (index, number of $R$'s), built from the end to the beginning, to keep track of next possible line break.
For example, if it is $w_i$'s turn, then the algorithm looks for the next 8 possible words (after the 72 char threshold) after $w_i$, and choose the one that has the most $R$ endings.
\begin{algorithm}
// helper function for counting whether a given word ends with a R; O(1)
function isLastCharR(word)
	return 1 if last char of words[n-1] is R; otherwise 0
end function

function dynamicBreakR(words, L=72, H=80) // n words in total
	// set up the book-keeping array and initialize it so that every word ends with w_n by default.
	let bpos be array of n of size n // break position
	let numR be array of 0 of size n // number of endings of R

	// "base case" set up for the last word
	set numR[n-1] to isLastCharR(word[n-1])

	// notice the loop is going from top to bottom
	for i from n-2 to 0 do
		// find the index that reaches the threshold -- taken space character into consideration like Q1; O(1) due to constant bound of 80
		let p be index for the first word that reaches 72 char or reaches end of text
		// find the optimal break from the next possible 8 words in and after w_p; taken space characters into consideration, like Q1; O(1) due to constant bound of 8
		set p to find max of numR[j] for j from p to p + 8
		bpos[i] = p
		numR[i] = numR[p] + isLastCharR(word[i])
		find 
	end for
end function
\end{algorithm}
With reasonings above, the run time is $\Theta(n)$.
Since we have the book-keeping array, we can recover the formatted 
\done
