\begin{enumerate}
\item
You may want to take a look on part b first.
Suppose the intervals are
\begin{align*}
I = \{A(1,3), B(2,6), C(5,8), D(8,11), E(10,14), F(C16,17)\}
\end{align*}
So we have the following picture:
\begin{verbatim}
  A   C    E     F
 --- ---- -----  --
  ----- ----
   B     D
\end{verbatim}
Obviously, the greedy method selects $ACEF$.
However, if I assign the weights to be
\begin{align*}
W(A) = 1, W(B) = 100, W(C) = 1, W(D) = 10, W(E) = 20, W(F) = 30
\end{align*}
Then we have the following table (notice it is built from the bottom):

\begin{tabular}{|c|c|r|}
\hline
Interval (loop from bottom) & Total preference & Selected Intervals \\
\hline
A & 52 & ACEF \\
B & 140 & BDF \\
C & 51 & CEF \\
D & 40 & DF \\
E & 50 & EF \\
F & 30 & F \\
\hline
\end{tabular}

Selecting $BDF$ yields the preference of 140; while selecting the greedy solution, $ACEF$ only yields 52.
Therefore, the greedy method fails.
\done
\item
{\bf Idea}
Observe that the the intervals that have the highest weights are the longest intervals that have the highest weights.
So, the point here is to solve the all longest sub-intervals such that we take the one that has the highest weights.
Notice the table in part a) is what the following algorithm will produce.

{\bf Optimal Structure}
The last interval is part of the optimal solution if and only if it must be non-overlapping with the others intervals that are in the optimal solution.

{\bf Overlapping Property}
As a consequence of the optimal structure, given intervals $i_k, i_{k-1} \in I$, then the perference for $i_{k-1}$ is the sum of $p_k + p_{k-1}$.

Also, since the algorithm is doing things in reverse, so the it needs to sort by the lastest starting time instead of earliest finishing time.
\begin{algorithm}
function weightedIntervals(I,P) // intervals and preferences
	// book-keeping
	sort I by latest starting time in ascending order
	let ret_sel be copy of I // selected intervals
	let ret_int be copy of P // perference total

	// handle the corner cases
	set ret_int[i] = 0    for all i > size(I)
	set ret_sel[i] = NULL for all i > size(I)

	// loop botton-up and process the current interval from the immediate next interval
	for i from size(I) - 1 to 0 do
		let next to immediate non-overlapping interval after I[i]
		set ret_int[i] += ret_int[next]
		set ret_sel[i] += ret_sel[next]
	end for

	// return selected intervals that has the highest pref.
	return ret_sel[i] for ret_int[i] is max(ret_int)
\end{algorithm}
\end{enumerate}
